// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Penna.Data.EntityFramework.Contexts;

namespace Penna.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211007134212_RemoveBankTable")]
    partial class RemoveBankTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Penna.Entities.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrentAccountId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<float>("Gabari")
                        .HasColumnType("real");

                    b.Property<float>("Gross")
                        .HasColumnType("real");

                    b.Property<float>("Net")
                        .HasColumnType("real");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("CurrentAccountId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Penna.Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryDialCode")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureContentType")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PictureRealName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("TCIdentityNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Penna.Entities.Models.Authority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("Penna.Entities.Models.AuthorityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AuthorityGroups");
                });

            modelBuilder.Entity("Penna.Entities.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ApartmentCostCalculation")
                        .HasColumnType("tinyint");

                    b.Property<int>("ApartmentCount")
                        .HasColumnType("int");

                    b.Property<byte>("BasementCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BlockCostCalculation")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("FloorCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte>("PublicAreaCostCalculation")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Penna.Entities.Models.BlockSubcontractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<byte>("BusinessGroupId")
                        .HasColumnType("tinyint");

                    b.Property<string>("CompanyRepresentative")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("CurrentAccountId");

                    b.ToTable("BlockSubcontractors");
                });

            modelBuilder.Entity("Penna.Entities.Models.BlockTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("UserPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPositionId");

                    b.ToTable("BlockTeams");
                });

            modelBuilder.Entity("Penna.Entities.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Penna.Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Penna.Entities.Models.CurrentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AccountTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("BusinessGroupId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("CompanyStatusId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(33)")
                        .HasMaxLength(33);

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TownId");

                    b.ToTable("CurrentAccounts");
                });

            modelBuilder.Entity("Penna.Entities.Models.CurrentAccountDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Credit")
                        .HasColumnType("float");

                    b.Property<DateTime>("CurDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrentAccountId")
                        .HasColumnType("int");

                    b.Property<double>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("InstallmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAccountId");

                    b.HasIndex("InstallmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CurrentAccountDetails");
                });

            modelBuilder.Entity("Penna.Entities.Models.Installment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InstallmentDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("InstallmentNo")
                        .HasColumnType("tinyint");

                    b.Property<double>("Payment")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("Penna.Entities.Models.Labor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Labors");
                });

            modelBuilder.Entity("Penna.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("BusinessGroupId")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Thickness")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Penna.Entities.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ada")
                        .HasColumnType("int");

                    b.Property<string>("ArchitecturalWorks")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("BlockCount")
                        .HasColumnType("int");

                    b.Property<string>("BuildingInspection")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommitmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ElectricalWorks")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("LandScapeWorks")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LicenseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MechanicalWorks")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Pafta")
                        .HasColumnType("int");

                    b.Property<int>("Parsel")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StaticWorks")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TotalApartmentCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalCommercialCount")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrentAccountId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TownId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Penna.Entities.Models.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("FileTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("BlockId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Penna.Entities.Models.Subcontractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("BusinessGroupId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(33)")
                        .HasMaxLength(33);

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TownId");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("Penna.Entities.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CountryDialCode")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("TaxOffice")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Penna.Entities.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("Penna.Entities.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Penna.Entities.Models.UserPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityGroupId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserPositions");
                });

            modelBuilder.Entity("Penna.Entities.Models.UserPositionAuthority", b =>
                {
                    b.Property<int>("UserPositionId")
                        .HasColumnType("int")
                        .HasMaxLength(128);

                    b.Property<int>("AuthorityId")
                        .HasColumnType("int")
                        .HasMaxLength(128);

                    b.HasKey("UserPositionId", "AuthorityId")
                        .HasName("PK_UserPositionAuthorities");

                    b.HasIndex("AuthorityId")
                        .HasName("IX_AuthorityId");

                    b.HasIndex("UserPositionId")
                        .HasName("IX_UserPositionId");

                    b.ToTable("UserPositionAuthorities");
                });

            modelBuilder.Entity("Penna.Entities.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("BusinessGroupId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CompanyStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(33)")
                        .HasMaxLength(33);

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)")
                        .HasMaxLength(11);

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TownId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Penna.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Penna.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Penna.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Apartment", b =>
                {
                    b.HasOne("Penna.Entities.Models.Block", "Block")
                        .WithMany("Apartments")
                        .HasForeignKey("BlockId")
                        .HasConstraintName("FK_Apartments_Block_BlockId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.CurrentAccount", "CurrentAccount")
                        .WithMany("Apartments")
                        .HasForeignKey("CurrentAccountId")
                        .HasConstraintName("FK_Apartments_CurrentAccount_CurrentAccountId");
                });

            modelBuilder.Entity("Penna.Entities.Models.AppUser", b =>
                {
                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("Penna.Entities.Models.Authority", b =>
                {
                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Authorities")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Authority_Tenants_TenantId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.AuthorityGroup", b =>
                {
                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("AuthorityGroups")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_AuthorityGroup_Tenants_TenantId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Block", b =>
                {
                    b.HasOne("Penna.Entities.Models.Project", "Project")
                        .WithMany("Blocks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Blocks_Project_ProjectId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.BlockSubcontractor", b =>
                {
                    b.HasOne("Penna.Entities.Models.Block", "Block")
                        .WithMany("BlockSubcontractors")
                        .HasForeignKey("BlockId")
                        .HasConstraintName("FK_BlockSubcontractor_Block_BlockId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.CurrentAccount", "CurrentAccount")
                        .WithMany("BlockSubcontractors")
                        .HasForeignKey("CurrentAccountId")
                        .HasConstraintName("FK_BlockSubcontractors_CurrentAccount_CurrentAccountId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.BlockTeam", b =>
                {
                    b.HasOne("Penna.Entities.Models.Block", "Block")
                        .WithMany("BlockTeams")
                        .HasForeignKey("BlockId")
                        .HasConstraintName("FK_BlockTeams_Block_BlockId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.AppUser", "User")
                        .WithMany("BlockTeams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BlockTeams_User_UserId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.UserPosition", "UserPosition")
                        .WithMany("BlockTeams")
                        .HasForeignKey("UserPositionId")
                        .HasConstraintName("FK_BlockTeams_UserPosition_UserPositionId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.City", b =>
                {
                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_Countries_CountryId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.CurrentAccount", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("CurrentAccounts")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CurrentAccounts_City_CityId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("CurrentAccounts")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_CurrentAccounts_Country_CountryId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("CurrentAccounts")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_CurrentAccounts_Tenant_TenantId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Town", "Town")
                        .WithMany("CurrentAccounts")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_CurrentAccounts_Town_TownId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.CurrentAccountDetail", b =>
                {
                    b.HasOne("Penna.Entities.Models.CurrentAccount", "CurrentAccount")
                        .WithMany("CurrentAccountDetails")
                        .HasForeignKey("CurrentAccountId")
                        .HasConstraintName("FK_CurrentAccountDetails_CurrentAccount_CurrentAccountId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Installment", "Installment")
                        .WithMany("CurrentAccountDetails")
                        .HasForeignKey("InstallmentId")
                        .HasConstraintName("FK_CurrentAccountDetails_Installment_InstallmentId");

                    b.HasOne("Penna.Entities.Models.Project", "Project")
                        .WithMany("CurrentAccountDetails")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CurrentAccountDetails_Project_ProjectId");
                });

            modelBuilder.Entity("Penna.Entities.Models.Installment", b =>
                {
                    b.HasOne("Penna.Entities.Models.Project", "Project")
                        .WithMany("Installments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Installments_Project_ProjectId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Labor", b =>
                {
                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Labors")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Labors_Tenants_TenantId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Product", b =>
                {
                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Products")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Products_Tenants_TenantId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Products_Units_UnitId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Project", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("Projects")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Projects_Cities_CityId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("Projects")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Projects_Countries_CountryId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.CurrentAccount", "CurrentAccount")
                        .WithMany("Projects")
                        .HasForeignKey("CurrentAccountId")
                        .HasConstraintName("FK_Projects_CurrentAccount_CurrentAccountId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Projects")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Projects_Tenants_TenantId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Town", "Town")
                        .WithMany("Projects")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_Projects_Towns_TownId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.ProjectFile", b =>
                {
                    b.HasOne("Penna.Entities.Models.Apartment", "Apartment")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("FK_ProjectFiles_Apartment_ApartmentId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Block", "Block")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("BlockId")
                        .HasConstraintName("FK_ProjectFiles_Block_BlockId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ProjectFiles_Project_ProjectId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Subcontractor", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("Subcontractors")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Subcontractors_City_CityId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("Subcontractors")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Subcontractors_Country_CountryId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Subcontractors")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Subcontractors_Tenant_TenantId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Town", "Town")
                        .WithMany("Subcontractors")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_Subcontractors_Town_TownId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Tenant", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("Tenants")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Tenants_Cities_CityId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("Tenants")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Tenants_Countries_CountryId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Town", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("Towns")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Towns_Cities_CityId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.UserPosition", b =>
                {
                    b.HasOne("Penna.Entities.Models.AuthorityGroup", "AuthorityGroup")
                        .WithMany("UserPositions")
                        .HasForeignKey("AuthorityGroupId")
                        .HasConstraintName("FK_UserPositions_AuthorityGroup_AuthorityGroupId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("UserPositions")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_UserPosition_Tenants_TenantId")
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.UserPositionAuthority", b =>
                {
                    b.HasOne("Penna.Entities.Models.Authority", "Authority")
                        .WithMany("UserPositionAuthorities")
                        .HasForeignKey("AuthorityId")
                        .HasConstraintName("FK_UserPositionAuthorities_Authority_AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.UserPosition", "UserPosition")
                        .WithMany("UserPositionAuthorities")
                        .HasForeignKey("UserPositionId")
                        .HasConstraintName("FK_UserPositionAuthorities_UserPosition_UserPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Penna.Entities.Models.Vendor", b =>
                {
                    b.HasOne("Penna.Entities.Models.City", "City")
                        .WithMany("Vendors")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Vendors_Cities_CityId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Country", "Country")
                        .WithMany("Vendors")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Vendors_Countries_CountryId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Tenant", "Tenant")
                        .WithMany("Vendors")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Vendors_Tenants_TenantId")
                        .IsRequired();

                    b.HasOne("Penna.Entities.Models.Town", "Town")
                        .WithMany("Vendors")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_Vendors_Towns_TownId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
